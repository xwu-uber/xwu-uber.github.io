function main() {
	const gap = document.querySelector('#gap');
	const canvas = document.querySelector('#qr');
	const ctx = canvas.getContext('2d');
	this.ctx = ctx;

	const test = [
		[0x3,0x3,0x3,0x3,0x3,0x3,0x3, 0x8,0xa,0x0,0x1,0x1,0x0,0x8, 0x3,0x3,0x3,0x3,0x3,0x3,0x3,],
		[0x3,0x2,0x2,0x2,0x2,0x2,0x3, 0x8,0xb,0x0,0x0,0x0,0x1,0x8, 0x3,0x2,0x2,0x2,0x2,0x2,0x3,],
		[0x3,0x2,0x3,0x3,0x3,0x2,0x3, 0x8,0xb,0x0,0x0,0x0,0x1,0x8, 0x3,0x2,0x3,0x3,0x3,0x2,0x3,],
		[0x3,0x2,0x3,0x3,0x3,0x2,0x3, 0x8,0xb,0x0,0x0,0x0,0x1,0x8, 0x3,0x2,0x3,0x3,0x3,0x2,0x3,],
		[0x3,0x2,0x3,0x3,0x3,0x2,0x3, 0x8,0xb,0x0,0x1,0x1,0x1,0x8, 0x3,0x2,0x3,0x3,0x3,0x2,0x3,],
		[0x3,0x2,0x2,0x2,0x2,0x2,0x3, 0x8,0xb,0x0,0x1,0x0,0x0,0x8, 0x3,0x2,0x2,0x2,0x2,0x2,0x3,],
		[0x3,0x3,0x3,0x3,0x3,0x3,0x3, 0x8,0x7,0x6,0x7,0x6,0x7,0x8, 0x3,0x3,0x3,0x3,0x3,0x3,0x3,],

		[0x8,0x8,0x8,0x8,0x8,0x8,0x8, 0x8,0xa,0x0,0x0,0x0,0x0,0x8, 0x8,0x8,0x8,0x8,0x8,0x8,0x8,],
		[0xa,0xa,0xb,0xa,0xa,0xb,0x7, 0xb,0xb,0x1,0x1,0x1,0x0,0xb, 0xa,0xb,0xb,0xb,0xb,0xb,0xa,],
		[0x0,0x0,0x0,0x1,0x1,0x1,0x6, 0x1,0x1,0x1,0x1,0x1,0x1,0x0, 0x1,0x0,0x0,0x1,0x0,0x0,0x1,],
		[0x1,0x1,0x0,0x1,0x1,0x0,0x7, 0x1,0x0,0x0,0x1,0x0,0x1,0x0, 0x1,0x0,0x0,0x0,0x1,0x0,0x1,],
		[0x0,0x1,0x1,0x1,0x0,0x0,0x6, 0x0,0x1,0x0,0x0,0x1,0x0,0x1, 0x0,0x0,0x1,0x1,0x0,0x0,0x1,],
		[0x1,0x1,0x1,0x0,0x0,0x0,0x7, 0x1,0x0,0x0,0x1,0x1,0x1,0x1, 0x0,0x0,0x0,0x0,0x0,0x0,0x1,],
		[0x8,0x8,0x8,0x8,0x8,0x8,0x8, 0x8,0x9,0x1,0x0,0x0,0x1,0x1, 0x0,0x1,0x0,0x0,0x0,0x1,0x0,],

		[0x3,0x3,0x3,0x3,0x3,0x3,0x3, 0x8,0xb,0x1,0x1,0x1,0x1,0x1, 0x0,0x1,0x1,0x1,0x0,0x0,0x1,],
		[0x3,0x2,0x2,0x2,0x2,0x2,0x3, 0x8,0xb,0x1,0x0,0x0,0x1,0x0, 0x1,0x1,0x0,0x0,0x0,0x0,0x0,],
		[0x3,0x2,0x3,0x3,0x3,0x2,0x3, 0x8,0xa,0x0,0x1,0x0,0x0,0x1, 0x0,0x1,0x1,0x0,0x0,0x0,0x1,],
		[0x3,0x2,0x3,0x3,0x3,0x2,0x3, 0x8,0xa,0x0,0x0,0x1,0x1,0x1, 0x1,0x0,0x0,0x0,0x0,0x0,0x0,],
		[0x3,0x2,0x3,0x3,0x3,0x2,0x3, 0x8,0xb,0x1,0x0,0x0,0x0,0x1, 0x1,0x0,0x0,0x0,0x1,0x1,0x1,],
		[0x3,0x2,0x2,0x2,0x2,0x2,0x3, 0x8,0xa,0x1,0x1,0x0,0x1,0x0, 0x1,0x0,0x1,0x0,0x0,0x0,0x0,],
		[0x3,0x3,0x3,0x3,0x3,0x3,0x3, 0x8,0xa,0x0,0x1,0x1,0x0,0x0, 0x1,0x0,0x0,0x1,0x1,0x0,0x1,],
	];
	const mapType = [
		'white', 'black',
		'#e08080', '#800000',
		'#e08080', '#800000',
		'#80e080', '#008000',
		'#8080e0', '#000080',
		'#e08080', '#800000',
	];
	const mapBool = [
		'white', 'black',
		'white', 'black',
		'white', 'black',
		'white', 'black',
		'white', 'black',
		'white', 'black',
	];
	draw(ctx, {gap:gap.valueAsNumber}, colorWithMap(mapBool, test));

	gap.addEventListener('change', e => {
		draw(ctx, {gap:gap.valueAsNumber}, colorWithMap(mapBool, test));
	});
}

function colorWithMap(map, matrixBool) {
	return matrixBool.map(row => row.map(cell => map[cell] || cell));
}

function draw(ctx, opts, matrixColor) {
	const size = matrixColor.length;
	const total = Math.min(ctx.canvas.width, ctx.canvas.height);
	const thickness = Math.floor(total / size);
	console.log(size, total, thickness);

	matrixColor.forEach((row, r) => row.forEach((color, c) => {
		ctx.fillStyle = color;
		ctx.fillRect(thickness*c, thickness*r, thickness, thickness);
	}));
	drawFinder(ctx, opts, 0, 0, thickness*7);
	drawFinder(ctx, opts, thickness*(size-7), 0, thickness*7);
	drawFinder(ctx, opts, 0, thickness*(size-7), thickness*7);
}

function drawFinder(ctx, opts, x, y, size) {
	ctx.save();
	ctx.translate(x, y);
	const d = size / 7;
	ctx.fillStyle = 'white';
	ctx.fillRect(0, 0, size, size);

	ctx.fillStyle = 'black';
	ctx.beginPath();
	ctx.moveTo(size/2, size);
	ctx.lineTo(size-d, size);
	ctx.arcTo(size, size, size, size-d, d);
	ctx.lineTo(size, d);
	ctx.arcTo(size, 0, size-d, 0, d);
	ctx.lineTo(d, 0);
	ctx.arcTo(0, 0, 0, d, d);
	ctx.lineTo(0, size-d);
	ctx.arcTo(0, size, d, size, d);
	ctx.lineTo(size/2, size);
	ctx.closePath();
	ctx.fill();

	ctx.fillStyle = 'white';
	ctx.beginPath();
	ctx.moveTo(size/2, size-d);
	ctx.lineTo(size-d*2, size-d);
	ctx.arcTo(size-d, size-d, size-d, size-d*2, d);
	ctx.lineTo(size-d, d*1.5);
	ctx.arcTo(size-d, d, size-d*1.5, d, d/2);

	const g = d*opts.gap; // actually half of gap
	ctx.lineTo(size/2+g, d);
	ctx.lineTo(size/2+g, d*1.5);
	ctx.arcTo(size/2+g, d*2, size/2+g+d/2, d*2, d/2);
	ctx.lineTo(size-d*2, d*2);
	ctx.lineTo(size-d*2, size-d*2.5);
	ctx.arcTo(size-d*2, size-d*2, size-d*2.5, size-d*2, d/2);
	ctx.lineTo(d*2.5, size-d*2);
	ctx.arcTo(d*2, size-d*2, d*2, size-d*2.5, d/2);
	ctx.lineTo(d*2, d*2);
	ctx.lineTo(size/2-g, d*2);
	ctx.lineTo(size/2-g, d*1.5);
	ctx.arcTo(size/2-g, d, size/2-g-d/2, d, d/2);
	ctx.lineTo(d*1.5, d);

	ctx.arcTo(d, d, d, d*1.5, d/2);
	ctx.lineTo(d, size-d*2);
	ctx.arcTo(d, size-d, d*2, size-d, d);
	ctx.lineTo(size/2, size-d);
	ctx.closePath();
	ctx.fill();

	const uber = document.querySelector('#uber');
	// ctx.drawImage(uber, 0, 0, size, size);

	ctx.restore();
}

main();
